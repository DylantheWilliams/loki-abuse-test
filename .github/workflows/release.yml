jobs:
  check:
    runs-on: "ubuntu-latest"
    steps:
    - name: "pull loki code"
      uses: "actions/checkout@v3"
      with:
        ref: "prepare-release-please"
        repository: "grafana/loki"
    - name: "setup go"
      uses: "actions/setup-go@v4"
      with:
        go-version-file: "go.mod"
    - name: "install dependencies"
      run: |
        go install github.com/bufbuild/buf/cmd/buf@v1.4.0
        go install github.com/golang/protobuf/protoc-gen-go@v1.3.1
        go install github.com/gogo/protobuf/protoc-gen-gogoslick@v1.3.0
        go install github.com/fatih/faillint@v1.11.0
        go install golang.org/x/tools/cmd/goimports@v0.7.0
        go install github.com/jsonnet-bundler/jsonnet-bundler/cmd/jb@v0.4.0
        go install github.com/monitoring-mixins/mixtool/cmd/mixtool@bca3066
        go install github.com/google/go-jsonnet/cmd/jsonnet@v0.18.0
        
        sudo apt update
        sudo apt install -qy musl gnupg ragel \
          file zip unzip jq gettext \
          protobuf-compiler libprotobuf-dev \
          libsystemd-dev jq
      shell: "bash"
    - name: "install golangci-lint"
      uses: "giantswarm/install-binary-action@v1"
      with:
        binary: "golangci-lint"
        download_url: "https://github.com/golangci/golangci-lint/releases/download/v${version}/golangci-lint-${version}-linux-amd64.tar.gz"
        smoke_test: "${binary} version"
        tarball_binary_path: "*/${binary}"
        version: "1.55.1"
    - name: "install shellcheck"
      uses: "giantswarm/install-binary-action@v1"
      with:
        binary: "shellcheck"
        download_url: "https://github.com/koalaman/shellcheck/releases/download/v${version}/shellcheck-v${version}.linux.x86_64.tar.xz"
        smoke_test: "${binary} --version"
        tarball_binary_path: "*/${binary}"
        version: "0.9.0"
    - name: "check generated files"
      run: "make BUILD_IN_CONTAINER=false check-generated-files"
      shell: "bash"
    - name: "check mod"
      run: "make BUILD_IN_CONTAINER=false check-mod"
      shell: "bash"
    - name: "shellcheck"
      run: "make BUILD_IN_CONTAINER=false lint-scripts"
      shell: "bash"
    - name: "check docs"
      run: "make BUILD_IN_CONTAINER=false check-doc"
      shell: "bash"
    - name: "validate example configs"
      run: "make BUILD_IN_CONTAINER=false check-example-config-doc"
      shell: "bash"
    - name: "check helm reference doc"
      run: "make BUILD_IN_CONTAINER=false documentation-helm-reference-check"
      shell: "bash"
  dist:
    needs:
    - "test"
    - "lint"
    - "check"
    runs-on: "ubuntu-latest"
    steps:
    - name: "pull loki code"
      uses: "actions/checkout@v3"
      with:
        ref: "prepare-release-please"
        repository: "grafana/loki"
    - name: "setup go"
      uses: "actions/setup-go@v4"
      with:
        go-version-file: "go.mod"
    - name: "build artifacts"
      run: "make BUILD_IN_CONTAINER=false dist"
      shell: "bash"
    - name: "upload artifacts"
      uses: "actions/upload-artifact@v3"
      with:
        name: "dist"
        path: "dist/"
  lint:
    runs-on: "ubuntu-latest"
    steps:
    - name: "pull loki code"
      uses: "actions/checkout@v3"
      with:
        ref: "prepare-release-please"
        repository: "grafana/loki"
    - name: "setup go"
      uses: "actions/setup-go@v4"
      with:
        go-version-file: "go.mod"
    - name: "install dependencies"
      run: |
        go install github.com/bufbuild/buf/cmd/buf@v1.4.0
        go install github.com/golang/protobuf/protoc-gen-go@v1.3.1
        go install github.com/gogo/protobuf/protoc-gen-gogoslick@v1.3.0
        go install github.com/fatih/faillint@v1.11.0
        go install golang.org/x/tools/cmd/goimports@v0.7.0
        go install github.com/jsonnet-bundler/jsonnet-bundler/cmd/jb@v0.4.0
        go install github.com/monitoring-mixins/mixtool/cmd/mixtool@bca3066
        go install github.com/google/go-jsonnet/cmd/jsonnet@v0.18.0
        
        sudo apt update
        sudo apt install -qy musl gnupg ragel \
          file zip unzip jq gettext \
          protobuf-compiler libprotobuf-dev \
          libsystemd-dev jq
      shell: "bash"
    - name: "install golangci-lint"
      uses: "giantswarm/install-binary-action@v1"
      with:
        binary: "golangci-lint"
        download_url: "https://github.com/golangci/golangci-lint/releases/download/v${version}/golangci-lint-${version}-linux-amd64.tar.gz"
        smoke_test: "${binary} version"
        tarball_binary_path: "*/${binary}"
        version: "1.55.1"
    - name: "install shellcheck"
      uses: "giantswarm/install-binary-action@v1"
      with:
        binary: "shellcheck"
        download_url: "https://github.com/koalaman/shellcheck/releases/download/v${version}/shellcheck-v${version}.linux.x86_64.tar.xz"
        smoke_test: "${binary} --version"
        tarball_binary_path: "*/${binary}"
        version: "0.9.0"
    - name: "lint"
      run: "make BUILD_IN_CONTAINER=false lint"
      shell: "bash"
    - name: "lint jsonnet"
      run: "make BUILD_IN_CONTAINER=false lint-jsonnet"
      shell: "bash"
  loki-image:
    needs:
    - "test"
    - "lint"
    - "check"
    runs-on: "ubuntu-latest"
    steps:
    - name: "pull loki code"
      uses: "actions/checkout@v3"
      with:
        ref: "prepare-release-please"
        repository: "grafana/loki"
    - name: "Set up QEMU"
      uses: "docker/setup-qemu-action@v3"
      with:
        go-version-file: "go.mod"
    - name: "set up docker buildx"
      uses: "docker/setup-buildx-action@v3"
    - id: "parse-metadata"
      name: "parse image metadata"
      run: |
        mkdir -p dist
        
        platform="$(echo "${{ matrix.platform}}" |  sed  "s/\(.*\)\/\(.*\)/\1-\2/")"
        echo "platform=${platform}" >> $GITHUB_OUTPUT
        
        version=$(jq -r '."cmd/loki"' .release-please-manifest.json)
        echo "version=${version}" >> $GITHUB_OUTPUT
      shell: "bash"
    - name: "Build and export"
      uses: "docker/build-push-action@v5"
      with:
        context: "."
        file: "cmd/loki/Dockerfile"
        outputs: "type=docker,dest=dist/loki-${{ steps.parse-metadata.outputs.version}}-${{ steps.parse-metadata.outputs.platform }}.tar"
        platforms: "${{ matrix.platform }}"
        tags: "grafana/loki:${{ steps.parse-metadata.outputs.version }}"
    - name: "upload artifacts"
      uses: "actions/upload-artifact@v3"
      with:
        name: "loki-image-${{ steps.parse-metadata.outputs.version}}-${{ steps.parse-metadata.outputs.platform }}"
        path: "dist/loki-${{ steps.parse-metadata.outputs.version}}-${{ steps.parse-metadata.outputs.platform }}.tar"
    strategy:
      fail-fast: true
      matrix:
        platform:
        - "linux/amd64"
        - "linux/arm64"
        - "linux/arm"
  promtail-image:
    needs:
    - "test"
    - "lint"
    - "check"
    runs-on: "ubuntu-latest"
    steps:
    - name: "pull loki code"
      uses: "actions/checkout@v3"
      with:
        ref: "prepare-release-please"
        repository: "grafana/loki"
    - name: "Set up QEMU"
      uses: "docker/setup-qemu-action@v3"
      with:
        go-version-file: "go.mod"
    - name: "set up docker buildx"
      uses: "docker/setup-buildx-action@v3"
    - id: "parse-metadata"
      name: "parse image metadata"
      run: |
        mkdir -p dist
        
        platform="$(echo "${{ matrix.platform}}" |  sed  "s/\(.*\)\/\(.*\)/\1-\2/")"
        echo "platform=${platform}" >> $GITHUB_OUTPUT
        
        version=$(jq -r '."clients/cmd/promtail"' .release-please-manifest.json)
        echo "version=${version}" >> $GITHUB_OUTPUT
      shell: "bash"
    - name: "Build and export"
      uses: "docker/build-push-action@v5"
      with:
        context: "."
        file: "clients/cmd/promtail/Dockerfile"
        outputs: "type=docker,dest=dist/promtail-${{ steps.parse-metadata.outputs.version}}-${{ steps.parse-metadata.outputs.platform }}.tar"
        platforms: "${{ matrix.platform }}"
        tags: "grafana/promtail:${{ steps.parse-metadata.outputs.version }}"
    - name: "upload artifacts"
      uses: "actions/upload-artifact@v3"
      with:
        name: "promtail-image-${{ steps.parse-metadata.outputs.version}}-${{ steps.parse-metadata.outputs.platform }}"
        path: "dist/promtail-${{ steps.parse-metadata.outputs.version}}-${{ steps.parse-metadata.outputs.platform }}.tar"
    strategy:
      fail-fast: true
      matrix:
        platform:
        - "linux/amd64"
        - "linux/arm64"
        - "linux/arm"
  release:
    needs:
    - "dist"
    - "loki-image"
    - "promtail-image"
    runs-on: "ubuntu-latest"
    steps:
    - name: "pull loki code"
      uses: "actions/checkout@v3"
      with:
        path: "loki"
        ref: "prepare-release-please"
        repository: "grafana/loki"
    - name: "pull release code"
      uses: "actions/checkout@v3"
      with:
        path: "release"
        repository: "grafana/loki-release"
    - name: "setup go"
      uses: "actions/setup-go@v4"
      with:
        go-version-file: "go.mod"
    - name: "setup node"
      uses: "actions/setup-node@v4"
      with:
        node-version: 16
    - id: "extract_branch"
      name: "extract branch name"
      run: |
        echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT
      shell: "bash"
      working-directory: "loki"
    - id: "release"
      name: "release please"
      run: |
        npm install
        npm exec -- release-please release-pr --token="${{ secrets.GITHUB_TOKEN }}" --repo-url="grafana/loki-release" --label "backport ${{ steps.extract_branch.outputs.branch}}" --manifest-file release/release-please-config.json
      shell: "bash"
      working-directory: "release"
    - if: "${{ steps.release.outputs.release_created }}"
      name: "download dist"
      uses: "actions/download-artifact@v3"
      with:
        name: "dist"
        path: "release/dist/"
    - env:
        GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
      if: "${{ steps.release.outputs.release_created }}"
      name: "upload release artifacts"
      run: |
        gh release upload ${{ steps.release.outputs.tag_name }} ./dist/build.txt
      shell: "bash"
      working-directory: "release"
    - id: "update_release_config"
      if: "${{ startsWith(steps.extract_branch.outputs.branch, 'k') && steps.release.outputs.release_created }}"
      name: "create release branch from k release"
      run: |
        branch=release-${{ steps.release.outputs.major }}.${{ steps.release.outputs.minor }}.x
        git checkout -b $branch
        mv release-please-config.json tmp.json
        jq '.versioning = "always-bump-patch"' tmp.json > release-please-config.json
        rm tmp.json
      shell: "bash"
      working-directory: "release"
    - id: "create_release_branch"
      if: "${{ steps.update_release_config.outcome == 'success' }}"
      name: "commit changes to release branch"
      uses: "stefanzweifel/git-auto-commit-action@v5"
      with:
        branch: "release-${{ steps.release.outputs.major }}.${{ steps.release.outputs.minor }}.x"
        commit_message: "chore: release branch bumps patch on release"
        create_branch: true
        file_pattern: "release/release-please-config.json"
    - env:
        BRANCH: "release-${{ steps.release.outputs.major }}.${{ steps.release.outputs.minor }}.x"
      id: "created_branch_message"
      if: "${{ steps.create_release_branch.outcome == 'success' }}"
      name: "comment on PR with release branch"
      run: |
        prNumber=$(echo ${{ steps.release.outputs.pr }} | jq -r .number)
        gh pr comment $prNumber --body "created release branch [$BRANCH](https://github.com/grafana/loki-release/tree/$BRANCH)"
      shell: "bash"
      working-directory: "release"
  test:
    runs-on: "ubuntu-latest"
    steps:
    - name: "pull loki code"
      uses: "actions/checkout@v3"
      with:
        ref: "prepare-release-please"
        repository: "grafana/loki"
    - name: "setup go"
      uses: "actions/setup-go@v4"
      with:
        go-version-file: "go.mod"
    - name: "install dependencies"
      run: |
        go install github.com/bufbuild/buf/cmd/buf@v1.4.0
        go install github.com/golang/protobuf/protoc-gen-go@v1.3.1
        go install github.com/gogo/protobuf/protoc-gen-gogoslick@v1.3.0
        go install github.com/fatih/faillint@v1.11.0
        go install golang.org/x/tools/cmd/goimports@v0.7.0
        go install github.com/jsonnet-bundler/jsonnet-bundler/cmd/jb@v0.4.0
        go install github.com/monitoring-mixins/mixtool/cmd/mixtool@bca3066
        go install github.com/google/go-jsonnet/cmd/jsonnet@v0.18.0
        
        sudo apt update
        sudo apt install -qy musl gnupg ragel \
          file zip unzip jq gettext \
          protobuf-compiler libprotobuf-dev \
          libsystemd-dev jq
      shell: "bash"
    - name: "install golangci-lint"
      uses: "giantswarm/install-binary-action@v1"
      with:
        binary: "golangci-lint"
        download_url: "https://github.com/golangci/golangci-lint/releases/download/v${version}/golangci-lint-${version}-linux-amd64.tar.gz"
        smoke_test: "${binary} version"
        tarball_binary_path: "*/${binary}"
        version: "1.55.1"
    - name: "install shellcheck"
      uses: "giantswarm/install-binary-action@v1"
      with:
        binary: "shellcheck"
        download_url: "https://github.com/koalaman/shellcheck/releases/download/v${version}/shellcheck-v${version}.linux.x86_64.tar.xz"
        smoke_test: "${binary} --version"
        tarball_binary_path: "*/${binary}"
        version: "0.9.0"
    - name: "test"
      run: "make BUILD_IN_CONTAINER=false test"
      shell: "bash"
name: "release"
"on":
  push:
    branches:
    - "main"
    - "release-[0-9].[0-9].x"
    - "k[0-9]*"
  workflow_dispatch: {}
permissions:
  contents: "write"
  issues: "write"
  pull-requests: "write"
